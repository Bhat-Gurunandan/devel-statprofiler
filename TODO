- file output
  - check whether getting rid of varint encoding speed up the writer
    (we compress using Snappy anyway)
- test various interesting cases
  - sort {}/map {}
- add option to set $^P to
  - 0x200 descriptive names for anonymous subroutines
  - 0x100 descriptive names for eval ""
  - 0x10  keep information about the definition line for a subroutine
  - 0x400 save source code for all files (optionally dumping it as soon
    as possible)
- command line options for analysis script
- calling stop -> enable DTRT
  - generate a new file id (child of the previous one)
  - check the file is reopened when re-entering the new runloop
- generated code containing #line directives
  - it might be useful to have both the original and generated code
    in the report, with some way to toggle between the two
- metadata/segmenting
  - supports writing overlapping sections
  - metadata does not belong to a section (probably not an issue, but
    it needs better handling in the aggregation phase)
  - overlapping/nested sections are not handled during aggregation
  - add global metadata (global to the whole process tree, available
    after report aggregation)
  - add @INC to global metadata
- some serious benchmarking
  - add a fast benchmark to be used during development and a slow more
    realistic one for release
- find a solution to correctly report exclusive/inclusive time for XSUBs
  with callbacks (might not be possible)
- decide what to do for multiple distinct evals mapping to the same
  logical file (with overlapping and non-overlapping line ranges)
  (t/382_evil_source_mapping.t cases in evil-source-mapping branch)

- detect multiple evals with the same #line directive and different source code
- closure aggregation
- recursive sub aggregation
- handle overlapping/nested sections
- make aggregation code reusable both as a script and in a web application
- file reader: Better error reporting
- the case fixed by 27fb541f0c03c541997604c4118dc82f4d1acec8, the synthetic
  file entry has the file name "eval:<sha1>"; fix it to display the
  "natural" name for the eval
- test case for 9d4110d016a72fabfb5cd45c4ae97468c9070f51
- test case for 8cca10b0053cf3a2e741fae7adc7f0ed3a1fea3c
- move finalize() work earlier during aggregation
- shorter/nicer filenames in the HTML report (use @INC/custom prefixes)
- allow calling file fetchers with multiple paths (to replace git-show with
  git-cat-file)
- split the Aggregator class in two (aggregation and loading of the final report)
- add an API to read traces by section, and remove the horrible hack of returning
  a fake empty trace when a section starts/ends
    - add some kind of ->watch_sections("name1", "name2") to the reader,
      with the option of returning data both inside and outside the section
    - instead of returning a single trace, the reader now returns a section,
      with included metadata; this means a sample can be potentially returned
      multiple times in different sections
    - the aggregator class needs to be tweaked but most of the logic should
      remain the same
